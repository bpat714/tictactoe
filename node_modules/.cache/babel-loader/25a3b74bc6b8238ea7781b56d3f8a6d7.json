{"ast":null,"code":"import { useState } from \"react\";\n\nconst createBoardState = () => Array(9).fill(null);\n\nfunction calculateWinner(boardState) {\n  const winningCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < winningCombinations.length; i++) {\n    const [a, b, c] = winningCombinations[i];\n\n    if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      return boardState[a];\n    }\n  }\n\n  return null;\n}\n\nexport function useGameState() {\n  const [gameState, setGameState] = useState({\n    history: [createBoardState()],\n    step: 0,\n    playerX: '',\n    playerO: ''\n  });\n  const current = gameState.history[gameState.step];\n  const xIsNext = gameState.step % 2 === 0;\n  const winner = calculateWinner(current);\n\n  function setPlayers(playerX, playerO) {\n    console.log('hello');\n    setGameState({\n      history: gameState.history,\n      step: gameState.step,\n      playerX,\n      playerO\n    });\n    console.log(playerX);\n    console.log(playerO);\n  }\n\n  function handleClick(square) {\n    const history = gameState.history.slice(0, gameState.step + 1);\n    const boardState = history[history.length - 1];\n\n    if (calculateWinner(boardState) || boardState[square]) {\n      //record winning board in database \n      //with the name of the winner \n      return;\n    }\n\n    const newBoardState = boardState.slice();\n    newBoardState[square] = gameState.step % 2 === 0 ? 'X' : 'O';\n    history.push(newBoardState);\n    setGameState({\n      history: history,\n      step: history.length - 1,\n      playerX: gameState.playerX,\n      playerO: gameState.playerO\n    });\n  }\n\n  function jumpTo(step) {\n    console.log('hello1');\n    setGameState({\n      history: gameState.history,\n      step,\n      playerX: gameState.playerX,\n      playerO: gameState.playerO\n    });\n  }\n\n  return {\n    gameState,\n    current,\n    xIsNext,\n    winner,\n    handleClick,\n    jumpTo,\n    setPlayers\n  };\n}","map":{"version":3,"sources":["/Users/bijalpatel/Desktop/tictactoe/src/components/GameState.tsx"],"names":["useState","createBoardState","Array","fill","calculateWinner","boardState","winningCombinations","i","length","a","b","c","useGameState","gameState","setGameState","history","step","playerX","playerO","current","xIsNext","winner","setPlayers","console","log","handleClick","square","slice","newBoardState","push","jumpTo"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport type Value = 'X' | 'O' | null;\n\nexport type BoardState = Value[];\nconst createBoardState = () => Array<Value>(9).fill(null);\n\nfunction calculateWinner(boardState: BoardState) {\n    const winningCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < winningCombinations.length; i++) {\n      const [a, b, c] = winningCombinations[i];\n      if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n        return boardState[a];\n      }\n    }\n    return null;\n  }\n\n  export type GameState = {\n      history: BoardState[],\n      step: number,\n      playerX: string,\n      playerO: string,\n  }\n\n  export function useGameState() {\n      const [gameState, setGameState] = useState<GameState>({\n        history: [createBoardState()],\n        step: 0,\n        playerX: '',\n        playerO: '',\n      });\n\n      const current = gameState.history[gameState.step];\n      const xIsNext = (gameState.step % 2) === 0;\n      const winner = calculateWinner(current);\n\n      function setPlayers(playerX: string, playerO: string){\n        console.log('hello');\n        setGameState({\n            history: gameState.history,\n            step: gameState.step,\n            playerX,\n            playerO,\n        });\n        console.log(playerX);\n        console.log(playerO);\n      }\n\n      function handleClick(square: number) {\n        const history = gameState.history.slice(0, gameState.step + 1);\n        const boardState = history[history.length - 1];\n        if (calculateWinner(boardState) || boardState[square]) {\n          //record winning board in database \n          //with the name of the winner \n          return;\n        }\n        const newBoardState = boardState.slice();\n        newBoardState[square] = (gameState.step % 2) === 0 ? 'X' : 'O';\n        history.push(newBoardState);\n        setGameState({\n          history: history,\n          step: history.length - 1,\n          playerX: gameState.playerX,\n          playerO: gameState.playerO,\n        });\n      }\n\n      function jumpTo(step: number) {\n        console.log('hello1');\n        setGameState({\n          history: gameState.history,\n          step,\n          playerX: gameState.playerX,\n          playerO: gameState.playerO,\n        });\n      }\n\n      return {\n          gameState, \n          current,\n          xIsNext,\n          winner,\n          handleClick,\n          jumpTo,\n          setPlayers,\n      };\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}