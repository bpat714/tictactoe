{"ast":null,"code":"import { useState } from \"react\";\n\nconst createBoardState = () => Array(9).fill(null);\n\nfunction calculateWinner(boardState, winner) {\n  const winningCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < winningCombinations.length; i++) {\n    const [a, b, c] = winningCombinations[i];\n\n    if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      winner = boardState[a];\n      return boardState[a];\n    }\n  }\n\n  return null;\n}\n\nexport function useGameState() {\n  const [gameState, setGameState] = useState({\n    history: [createBoardState()],\n    step: 0,\n    playerX: 'X',\n    playerO: 'O',\n    winner: ''\n  });\n  const current = gameState.history[gameState.step];\n  const xIsNext = gameState.step % 2 === 0;\n  var X = gameState.playerX;\n  var O = gameState.playerO;\n  var winningPlayer = gameState.winner;\n  const winner = calculateWinner(current, winningPlayer); //winner == 'X' ? setWinner(X) : setWinner(O)\n\n  function setPlayerX(playerX) {\n    setGameState({\n      history: gameState.history,\n      step: gameState.step,\n      playerX,\n      playerO: gameState.playerO,\n      winner: gameState.winner\n    });\n    X = playerX;\n  }\n\n  function setWinner(winner) {\n    setGameState({\n      history: gameState.history,\n      step: gameState.step,\n      playerX: gameState.playerX,\n      playerO: gameState.playerO,\n      winner\n    });\n    console.log(winner);\n  }\n\n  function setPlayerO(playerO) {\n    setGameState({\n      history: gameState.history,\n      step: gameState.step,\n      playerX: gameState.playerX,\n      playerO,\n      winner: gameState.winner\n    });\n    O = playerO;\n  }\n\n  function handleClick(square) {\n    const history = gameState.history.slice(0, gameState.step + 1);\n    const boardState = history[history.length - 1];\n\n    if (calculateWinner(boardState, winningPlayer) || boardState[square]) {\n      //record winning board in database \n      //with the name of the winner \n      return;\n    }\n\n    const newBoardState = boardState.slice();\n    newBoardState[square] = gameState.step % 2 === 0 ? 'X' : 'O';\n    history.push(newBoardState);\n    setGameState({\n      history: history,\n      step: history.length - 1,\n      playerX: gameState.playerX,\n      playerO: gameState.playerO,\n      winner: gameState.winner\n    });\n  }\n\n  function jumpTo(step) {\n    setGameState({\n      history: gameState.history,\n      step,\n      playerX: gameState.playerX,\n      playerO: gameState.playerO,\n      winner: gameState.winner\n    });\n  }\n\n  return {\n    gameState,\n    current,\n    xIsNext,\n    winner,\n    X,\n    O,\n    winningPlayer,\n    handleClick,\n    jumpTo,\n    setPlayerX,\n    setPlayerO\n  };\n}","map":{"version":3,"sources":["/Users/bijalpatel/Desktop/tictactoe/src/components/GameState.tsx"],"names":["useState","createBoardState","Array","fill","calculateWinner","boardState","winner","winningCombinations","i","length","a","b","c","useGameState","gameState","setGameState","history","step","playerX","playerO","current","xIsNext","X","O","winningPlayer","setPlayerX","setWinner","console","log","setPlayerO","handleClick","square","slice","newBoardState","push","jumpTo"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport type Value = 'X' | 'O' | null;\n\nexport type BoardState = Value[];\nconst createBoardState = () => Array<Value>(9).fill(null);\n\nfunction calculateWinner(boardState: BoardState, winner: Value) {\n    const winningCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < winningCombinations.length; i++) {\n      const [a, b, c] = winningCombinations[i];\n      if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n          winner = boardState[a];\n        return boardState[a];\n      }\n    }\n    return null;\n  }\n\n  export type GameState = {\n      history: BoardState[],\n      step: number,\n      playerX: string,\n      playerO: string,\n      winner: string,\n  }\n\n  export function useGameState() {\n      const [gameState, setGameState] = useState<GameState>({\n        history: [createBoardState()],\n        step: 0,\n        playerX: 'X',\n        playerO: 'O',\n        winner: '',\n      });\n\n      const current = gameState.history[gameState.step];\n      const xIsNext = (gameState.step % 2) === 0;\n      var X = gameState.playerX;\n      var O = gameState.playerO;\n      var winningPlayer  = gameState.winner;\n      const winner = calculateWinner(current, winningPlayer);\n\n      //winner == 'X' ? setWinner(X) : setWinner(O)\n\n\n      function setPlayerX(playerX: string){\n        setGameState({\n          history: gameState.history,\n          step: gameState.step,\n          playerX,\n          playerO: gameState.playerO,\n          winner: gameState.winner,\n        });\n        X = playerX;\n      }\n\n      function setWinner(winner: string){\n        setGameState({\n          history: gameState.history,\n          step: gameState.step,\n          playerX: gameState.playerX,\n          playerO: gameState.playerO,\n          winner,\n        });\n        console.log(winner);\n      }\n\n      function setPlayerO(playerO: string){\n        setGameState({\n          history: gameState.history,\n          step: gameState.step,\n          playerX: gameState.playerX,\n          playerO,\n          winner: gameState.winner,\n        });\n        O = playerO;\n      }\n\n      function handleClick(square: number) {\n        const history = gameState.history.slice(0, gameState.step + 1);\n        const boardState = history[history.length - 1];\n        if (calculateWinner(boardState, winningPlayer) || boardState[square]) {\n          //record winning board in database \n          //with the name of the winner \n          return;\n        }\n        const newBoardState = boardState.slice();\n        newBoardState[square] = (gameState.step % 2) === 0 ? 'X' : 'O';\n        history.push(newBoardState);\n        setGameState({\n          history: history,\n          step: history.length - 1,\n          playerX: gameState.playerX,\n          playerO: gameState.playerO,\n          winner: gameState.winner,\n        });\n      }\n\n      function jumpTo(step: number) {\n        setGameState({\n          history: gameState.history,\n          step,\n          playerX: gameState.playerX,\n          playerO: gameState.playerO,\n          winner: gameState.winner,\n        });\n      }\n\n      return {\n          gameState, \n          current,\n          xIsNext,\n          winner,\n          X,\n          O,\n          winningPlayer,\n          handleClick,\n          jumpTo,\n          setPlayerX,\n          setPlayerO,\n      };\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}