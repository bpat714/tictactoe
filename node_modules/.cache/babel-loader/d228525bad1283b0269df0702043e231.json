{"ast":null,"code":"import { useState } from \"react\";\n\nconst createBoardState = () => Array(9).fill(null);\n\nconsole.log(BoardState);\n\nfunction calculateWinner(boardState) {\n  const winningCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < winningCombinations.length; i++) {\n    const [a, b, c] = winningCombinations[i];\n\n    if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      return boardState[a];\n    }\n  }\n\n  return null;\n}\n\nexport function useGameState() {\n  const [gameState, setGameState] = useState({\n    history: [createBoardState()],\n    step: 0\n  });\n  const current = gameState.history[gameState.step];\n  const xIsNext = gameState.step % 2 === 0;\n  const winner = calculateWinner(current);\n\n  function handleClick(square) {\n    const history = gameState.history.slice(0, gameState.step + 1);\n    const boardState = history[history.length - 1];\n\n    if (calculateWinner(boardState) || boardState[square]) {\n      return;\n    }\n\n    const newBoardState = boardState.slice();\n    newBoardState[square] = gameState.step % 2 === 0 ? 'X' : 'O';\n    history.push(newBoardState);\n    setGameState({\n      history: history,\n      step: history.length - 1\n    });\n  }\n\n  function jumpTo(step) {\n    setGameState({\n      history: gameState.history,\n      step\n    });\n  }\n\n  return {\n    gameState,\n    current,\n    xIsNext,\n    winner,\n    handleClick,\n    jumpTo\n  };\n}","map":{"version":3,"sources":["/Users/bijalpatel/Desktop/tictactoe/src/components/GameState.tsx"],"names":["useState","createBoardState","Array","fill","console","log","BoardState","calculateWinner","boardState","winningCombinations","i","length","a","b","c","useGameState","gameState","setGameState","history","step","current","xIsNext","winner","handleClick","square","slice","newBoardState","push","jumpTo"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Board } from \"./Board\";\n\nexport type Value = 'X' | 'O' | null;\n\nexport type BoardState = Value[];\nconst createBoardState = () => Array<Value>(9).fill(null);\nconsole.log(BoardState);\n\nfunction calculateWinner(boardState: BoardState) {\n    const winningCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < winningCombinations.length; i++) {\n      const [a, b, c] = winningCombinations[i];\n      if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n        return boardState[a];\n      }\n    }\n    return null;\n  }\n\n  export type GameState = {\n      history: BoardState[],\n      step: number,\n  }\n\n  export function useGameState() {\n      const [gameState, setGameState] = useState<GameState>({\n        history: [createBoardState()],\n        step: 0,\n      });\n\n      const current = gameState.history[gameState.step];\n      const xIsNext = (gameState.step % 2) === 0;\n      const winner = calculateWinner(current);\n\n      function handleClick(square: number) {\n        const history = gameState.history.slice(0, gameState.step + 1);\n        const boardState = history[history.length - 1];\n        if (calculateWinner(boardState) || boardState[square]) {\n          return;\n        }\n        const newBoardState = boardState.slice();\n        newBoardState[square] = (gameState.step % 2) === 0 ? 'X' : 'O';\n        history.push(newBoardState);\n        setGameState({\n          history: history,\n          step: history.length - 1,\n        });\n      }\n\n      function jumpTo(step: number) {\n        setGameState({\n          history: gameState.history,\n          step,\n        });\n      }\n\n      return {\n          gameState, \n          current,\n          xIsNext,\n          winner,\n          handleClick,\n          jumpTo,\n      };\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}