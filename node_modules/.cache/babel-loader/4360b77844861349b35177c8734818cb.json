{"ast":null,"code":"import { useState } from \"react\";\n\nconst createBoardState = () => Array(9).fill(null);\n\nfunction calculateWinner(boardState) {\n  const winningCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < winningCombinations.length; i++) {\n    const [a, b, c] = winningCombinations[i];\n\n    if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n      return boardState[a];\n    }\n  }\n\n  return null;\n}\n\nexport function useGameState() {\n  const [gameState, setGameState] = useState({\n    history: [createBoardState()],\n    step: 0,\n    playerX: 'X',\n    playerO: 'O',\n    winner: ''\n  });\n  const current = gameState.history[gameState.step];\n  const xIsNext = gameState.step % 2 === 0;\n  const winner = calculateWinner(current);\n  var X = gameState.playerX;\n  var O = gameState.playerO; //winner == 'X' ? setWinner(X) : setWinner(O)\n\n  function setPlayerX(playerX) {\n    setGameState({\n      history: gameState.history,\n      step: gameState.step,\n      playerX,\n      playerO: gameState.playerO,\n      winner: gameState.winner\n    });\n    X = playerX;\n  }\n\n  function setWinner(winner) {\n    if (winner = X) {\n      setGameState({\n        history: gameState.history,\n        step: gameState.step,\n        playerX: gameState.playerX,\n        playerO: gameState.playerO,\n        winner: gameState.playerX\n      });\n    } else {\n      setGameState({\n        history: gameState.history,\n        step: gameState.step,\n        playerX: gameState.playerX,\n        playerO: gameState.playerO,\n        winner: gameState.playerO\n      });\n    }\n\n    console.log(gameState.winner);\n  }\n\n  function setPlayerO(playerO) {\n    setGameState({\n      history: gameState.history,\n      step: gameState.step,\n      playerX: gameState.playerX,\n      playerO,\n      winner: gameState.winner\n    });\n    O = playerO;\n  }\n\n  function handleClick(square) {\n    const history = gameState.history.slice(0, gameState.step + 1);\n    const boardState = history[history.length - 1];\n\n    if (calculateWinner(boardState) || boardState[square]) {\n      //console.log(gameState.winner);\n      //record winning board in database \n      //with the name of the winner \n      if (winner) {\n        setWinner(winner);\n      }\n\n      return;\n    }\n\n    const newBoardState = boardState.slice();\n    newBoardState[square] = gameState.step % 2 === 0 ? 'X' : 'O';\n    history.push(newBoardState);\n    setGameState({\n      history: history,\n      step: history.length - 1,\n      playerX: gameState.playerX,\n      playerO: gameState.playerO,\n      winner: gameState.winner\n    });\n  }\n\n  function jumpTo(step) {\n    setGameState({\n      history: gameState.history,\n      step,\n      playerX: gameState.playerX,\n      playerO: gameState.playerO,\n      winner: gameState.winner\n    });\n  }\n\n  return {\n    gameState,\n    current,\n    xIsNext,\n    winner,\n    X,\n    O,\n    handleClick,\n    jumpTo,\n    setPlayerX,\n    setPlayerO,\n    setWinner\n  };\n}","map":{"version":3,"sources":["/Users/bijalpatel/Desktop/tictactoe/src/components/GameState.tsx"],"names":["useState","createBoardState","Array","fill","calculateWinner","boardState","winningCombinations","i","length","a","b","c","useGameState","gameState","setGameState","history","step","playerX","playerO","winner","current","xIsNext","X","O","setPlayerX","setWinner","console","log","setPlayerO","handleClick","square","slice","newBoardState","push","jumpTo"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport type Value = 'X' | 'O' | null;\n\nexport type BoardState = Value[];\nconst createBoardState = () => Array<Value>(9).fill(null);\n\nfunction calculateWinner(boardState: BoardState) {\n    const winningCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < winningCombinations.length; i++) {\n      const [a, b, c] = winningCombinations[i];\n      if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n        return boardState[a];\n      }\n    }\n    return null;\n  }\n\n  export type GameState = {\n      history: BoardState[],\n      step: number,\n      playerX: string,\n      playerO: string,\n      winner: string,\n  }\n\n  export function useGameState() {\n      const [gameState, setGameState] = useState<GameState>({\n        history: [createBoardState()],\n        step: 0,\n        playerX: 'X',\n        playerO: 'O',\n        winner: '',\n      });\n\n      const current = gameState.history[gameState.step];\n      const xIsNext = (gameState.step % 2) === 0;\n      const winner = calculateWinner(current);\n      var X = gameState.playerX;\n      var O = gameState.playerO;\n\n      //winner == 'X' ? setWinner(X) : setWinner(O)\n\n\n      function setPlayerX(playerX: string){\n        setGameState({\n          history: gameState.history,\n          step: gameState.step,\n          playerX,\n          playerO: gameState.playerO,\n          winner: gameState.winner,\n        });\n        X = playerX;\n      }\n\n      function setWinner(winner: string){\n        if(winner = X){\n          setGameState({\n            history: gameState.history,\n            step: gameState.step,\n            playerX: gameState.playerX,\n            playerO: gameState.playerO,\n            winner: gameState.playerX,\n          });\n          \n        } else {\n          setGameState({\n            history: gameState.history,\n            step: gameState.step,\n            playerX: gameState.playerX,\n            playerO: gameState.playerO,\n            winner: gameState.playerO,\n          });\n        }\n        console.log(gameState.winner);\n      }\n\n      function setPlayerO(playerO: string){\n        setGameState({\n          history: gameState.history,\n          step: gameState.step,\n          playerX: gameState.playerX,\n          playerO,\n          winner: gameState.winner,\n        });\n        O = playerO;\n      }\n\n      function handleClick(square: number) {\n        const history = gameState.history.slice(0, gameState.step + 1);\n        const boardState = history[history.length - 1];\n\n        if (calculateWinner(boardState) || boardState[square]) {\n          //console.log(gameState.winner);\n          //record winning board in database \n          //with the name of the winner \n          if(winner){\n            setWinner(winner)\n          }\n          return;\n        }\n        const newBoardState = boardState.slice();\n        newBoardState[square] = (gameState.step % 2) === 0 ? 'X' : 'O';\n        history.push(newBoardState);\n        setGameState({\n          history: history,\n          step: history.length - 1,\n          playerX: gameState.playerX,\n          playerO: gameState.playerO,\n          winner: gameState.winner,\n        });\n      }\n\n      function jumpTo(step: number) {\n        setGameState({\n          history: gameState.history,\n          step,\n          playerX: gameState.playerX,\n          playerO: gameState.playerO,\n          winner: gameState.winner,\n        });\n      }\n\n      return {\n          gameState, \n          current,\n          xIsNext,\n          winner,\n          X,\n          O,\n          handleClick,\n          jumpTo,\n          setPlayerX,\n          setPlayerO,\n          setWinner,\n      };\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}